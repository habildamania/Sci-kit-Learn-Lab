# -*- coding: utf-8 -*-
"""Part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Fx3tQGJBU4PeBjwDFirMNjgFMYqU-oa
"""

from sklearn.neural_network import MLPClassifier

import numpy as np
import pandas as pd

from pandas.plotting import scatter_matrix

df = pd.read_csv('http://mlr.cs.umass.edu/ml/machine-learning-databases/car/car.data',names=['buying','maintenance','doors','persons','lug_boot','safety','abcd'])

df.describe()

df

df.dtypes

from sklearn import preprocessing

le= preprocessing.LabelEncoder()

#to convert into numbers
df.buying = le.fit_transform(df.buying)
df.maintenance = le.fit_transform(df.maintenance)
df.doors = le.fit_transform(df.doors)
df.persons = le.fit_transform(df.persons)
df.lug_boot = le.fit_transform(df.lug_boot)
df.safety = le.fit_transform(df.safety)
df.abcd = le.fit_transform(df.abcd)
df.dtypes
#df['buying'] = df['buying'].astype(float)
#df['maintenance'] = df['maintenance'].astype(float)
#df['doors'] = df['doors'].astype(float)
#df['persons'] = df['persons'].astype(float)
#df['lug_boot'] = df['lug_boot'].astype(float)
#df['safety'] = df['safety'].astype(float)
#df['abcd'] = df['abcd'].astype(float)''''
#to convert back
df = df.astype(float)
df.dtypes
#train.Sex = le_sex.inverse_transform(train.Sex)

df

from sklearn.model_selection import train_test_split

X = df.iloc[:,0:6].values

Y = df.iloc[:,6:7].values

Y

X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size=0.3)

X_train

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
# Fit only to the training data
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(30,30,30),max_iter = 2000)

mlp.fit(X_train,y_train.ravel())

predictions = mlp.predict(X_test)

mlp.score(X_test, y_test)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(y_test,predictions))

print(classification_report(y_test,predictions))

from sklearn.metrics import accuracy_score
accuracy_score(y_test, predictions)

mlp.score(X_test,y_test)

